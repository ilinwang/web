#FIG 3.1
Landscape
Center
Inches
1200 2
6 675 4800 7050 6600
6 825 5325 2700 6450
4 0 -1 0 0 0 12 0.0000000 4 165 1545 826 5476 create 8 arcs (8n+1, i)\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 1876 5701 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 1876 6076 ...\001
4 0 -1 0 0 0 12 0.0000000 4 165 915 1726 6376 (8n+1, i+7n)\001
4 0 -1 0 0 0 12 0.0000000 4 165 915 1726 5926 (8n+1, i+4n)\001
-6
2 4 2 1 -1 7 0 0 -1 3.000 0 0 7 0 0 5
	 3676 6451 3676 4876 751 4876 751 6451 3676 6451
2 4 2 1 -1 7 0 0 -1 3.000 0 0 7 0 0 5
	 6901 6451 6901 4876 3826 4876 3826 6451 6901 6451
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 6976 6526 6976 4801 676 4801 676 6526 6976 6526
4 0 -1 0 0 0 12 0.0000000 4 180 2805 826 5101 create (8n+1)th node corresponding to i\001
4 0 -1 0 0 0 12 0.0000000 4 180 2805 3901 5101 create (8n+2)th node corresponding to j\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 5027 5702 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 5027 6077 ...\001
4 0 -1 0 0 0 12 0.0000000 4 180 1545 3977 5477 create 8 arcs (j, 8n+2)\001
4 0 -1 0 0 0 12 0.0000000 4 180 915 4877 6377 (j+7n, 8n+2)\001
4 0 -1 0 0 0 12 0.0000000 4 180 915 4877 5927 (j+4n, 8n+2)\001
-6
6 1425 2925 6300 4425
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 6226 4351 6226 2926 1426 2926 1426 4351 6226 4351
4 0 -1 0 0 0 12 0.0000000 4 165 1770 1576 3151 create 8n nodes: 1, ......,n\001
4 0 -1 0 0 0 12 0.0000000 4 165 795 2776 3376 n+1....,n+n\001
4 0 -1 0 0 0 12 0.0000000 4 15 90 2926 3901 ..\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 3301 3901 ...\001
4 0 -1 0 0 0 12 0.0000000 4 165 930 2776 3664 2n+1,..,2n+n\001
4 0 -1 0 0 0 12 0.0000000 4 165 1320 4276 3151 8m arcs: 1,........,m\001
4 0 -1 0 0 0 12 0.0000000 4 165 1065 4951 3376 m+1,......,m+m\001
4 0 -1 0 0 0 12 0.0000000 4 165 1155 4951 3664 2m+1,....,2m+m\001
4 0 -1 0 0 0 12 0.0000000 4 15 90 5176 3826 ..\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 5551 3826 ...\001
4 0 -1 0 0 0 12 0.0000000 4 165 930 2776 4201 7n+1,..,7n+n\001
4 0 -1 0 0 0 12 0.0000000 4 165 1155 4951 4126 7m+1,....,7m+m\001
-6
6 975 2250 6675 2625
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 6601 2551 6601 2251 976 2251 976 2551 6601 2551
4 0 -1 0 0 0 12 0.0000000 4 180 5415 1126 2476 Get Physical Network Topology [ tail  head  lowerbound  upperbound cost ]\001
-6
6 7875 2850 13125 6150
6 8100 4725 10425 5025
4 0 -1 0 0 0 12 0.0000000 4 90 90 8101 4876 n\001
4 0 -1 0 0 0 12 0.0000000 4 165 615 8551 4951 node_no\001
4 0 -1 0 0 0 12 0.0000000 4 135 705 9676 4951 imbalance\001
-6
6 8101 5101 12826 5851
6 8101 5101 12751 5401
4 0 -1 0 0 0 12 0.0000000 4 90 75 8102 5252 a\001
4 0 -1 0 0 0 12 0.0000000 4 135 210 8552 5327 tail\001
4 0 -1 0 0 0 12 0.0000000 4 135 330 9077 5327 head\001
4 0 -1 0 0 0 12 0.0000000 4 135 975 9827 5327 lowerbouand \001
4 0 -1 0 0 0 12 0.0000000 4 180 855 11177 5327 upperbound\001
4 0 -1 0 0 0 12 0.0000000 4 120 285 12452 5327 cost\001
-6
6 8102 5402 12752 5702
4 0 -1 0 0 0 12 0.0000000 4 90 75 8103 5553 a\001
4 0 -1 0 0 0 12 0.0000000 4 135 210 8553 5628 tail\001
4 0 -1 0 0 0 12 0.0000000 4 135 330 9078 5628 head\001
4 0 -1 0 0 0 12 0.0000000 4 135 975 9828 5628 lowerbouand \001
4 0 -1 0 0 0 12 0.0000000 4 180 855 11178 5628 upperbound\001
4 0 -1 0 0 0 12 0.0000000 4 120 285 12453 5628 cost\001
-6
4 0 -1 0 0 0 12 0.0000000 4 15 135 8102 5777 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 8552 5777 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 9077 5777 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 9977 5777 ...\001
4 0 -1 0 0 0 12 0.0000000 4 15 180 11327 5777 ....\001
4 0 -1 0 0 0 12 0.0000000 4 15 135 12452 5777 ...\001
-6
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 13051 6076 13051 2851 7876 2851 7876 6076 13051 6076
4 0 -1 0 0 0 12 0.0000000 4 135 1860 8326 3151 DIMACS network format\001
4 0 -1 0 0 0 12 0.0000000 4 90 75 8101 3676 c\001
4 0 -1 0 0 0 12 0.0000000 4 90 75 8101 3964 c\001
4 0 -1 0 0 0 12 0.0000000 4 135 765 8626 3751 Comments\001
4 0 -1 0 0 0 12 0.0000000 4 135 765 8626 4051 Comments\001
4 0 -1 0 0 0 12 0.0000000 4 135 90 8101 4426 p\001
4 0 -1 0 0 0 12 0.0000000 4 120 645 8551 4501 comment\001
4 0 -1 0 0 0 12 0.0000000 4 135 510 9676 4501 #nodes\001
4 0 -1 0 0 0 12 0.0000000 4 135 375 10726 4501 #arcs\001
-6
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 3975 1425 3975 900 525 900 525 1425 3975 1425
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 2
	0 0 1.00 60.00 120.00
	 3975 1200 4200 1200
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 6450 1500 6450 900 4275 900 4275 1500 6450 1500
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 2
	0 0 1.00 60.00 120.00
	 7050 4350 7575 4350
2 1 1 1 -1 7 0 0 -1 4.000 0 0 -1 0 0 3
	 7275 2250 7275 6525 7275 6375
2 4 1 1 -1 7 0 0 -1 4.000 0 0 7 0 0 5
	 8026 10276 8026 8026 1351 8026 1351 10276 8026 10276
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 4501 9976 4501 9526 2176 9526 2176 9976 4501 9976
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 6
	1 1 1.00 60.00 120.00
	 8026 9151 8401 9151 8401 7726 3901 7726 3901 7951 3901 7951
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 0 0 1
	 3901 7951
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 0 0 1
	 3901 7951
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 0 0 1
	 3901 7951
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 0 0 1
	 3901 7951
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 2
	1 1 1.00 60.00 120.00
	 3901 7726 3901 8026
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 0 0 1
	 3901 8026
2 4 0 1 -1 7 0 0 -1 0.000 0 0 7 0 0 5
	 6001 8476 6001 8176 1726 8176 1726 8476 6001 8476
2 4 2 1 -1 7 0 0 -1 3.000 0 0 7 0 0 5
	 13350 6825 13350 1950 225 1950 225 6825 13350 6825
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 2
	1 1 1.00 60.00 120.00
	 5175 1500 5175 1950
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 2
	1 1 1.00 60.00 120.00
	 5250 6825 5250 7275
2 1 0 1 -1 7 0 0 -1 0.000 0 0 -1 1 0 5
	1 1 1.00 60.00 120.00
	 5100 10275 5100 10875 13950 10875 13950 1200 6600 1200
4 0 -1 0 0 0 12 0.0000000 4 165 3225 600 1125 Get Demand Matrix [ source  sink   demand ]\001
4 0 -1 0 0 0 12 0.0000000 4 180 2070 675 1350 (already in descending order)\001
4 0 -1 0 0 0 12 0.0000000 4 135 1830 4350 1125 Get 1 demand once a time\001
4 0 -1 0 0 0 12 0.0000000 4 180 1965 4350 1413 say, sorce=i, sink=j, k units\001
4 0 -1 0 0 0 12 0.0000000 4 180 3390 1876 8827 After this is done, output the assignment data as\001
4 0 -1 0 0 0 12 0.0000000 4 180 4515 2251 9226 demand_index  starting_point  midium points  destination_point\001
4 0 -1 0 0 0 12 0.0000000 4 135 660 7051 9226 into a file\001
4 0 -1 0 0 0 12 0.0000000 4 180 2055 2326 9826 block for updatting networks\001
4 0 -1 0 0 0 12 0.0000000 4 180 3975 1876 8401 Apply Dijkstra Algorithm to solve a unit of this demand\001
4 0 -1 0 0 0 12 0.0000000 4 180 6810 3676 7501 Loops to send out the selected demand. # loops=how many units of that demand (k, in this case)\001
4 0 -1 0 0 0 12 0.0000000 4 180 3135 8175 1050 1 loop for 1 demand till all demands are sent\001
